generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String               @id @default(uuid())
  email             String?              @unique
  emailVerified     DateTime?
  name              String?
  image             String?
  role              UserRole             @default(USER)
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  accounts          Account[]
  createdAgents     Agent[]              @relation("CreatedAgents")
  authSessions      Session[]
  chatSessions      ChatSession[]
  agentPermissions  UserAgentPermission[]

  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Agent {
  id              String                @id @default(uuid())
  createdBy       String
  name            String
  description     String?
  model           String
  config          Json?
  endpointUrl     String
  isPublic        Boolean               @default(false) // If true, all users can access
  createdAt       DateTime              @default(now())
  creator         User                  @relation("CreatedAgents", fields: [createdBy], references: [id], onDelete: Cascade)
  conversations   Conversation[]
  userPermissions UserAgentPermission[]

  @@index([createdBy])
  @@map("agents")
}

model Conversation {
  id            String      @id @default(uuid())
  chatSessionId String
  agentId       String
  title         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  agent         Agent       @relation(fields: [agentId], references: [id], onDelete: Cascade)
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  messages      Message[]

  @@index([agentId])
  @@index([chatSessionId])
  @@map("conversations")
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  role           String       // 'user' | 'assistant' | 'system'
  content        String       @db.Text
  metadata       Json?
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@map("messages")
}

// Chat Session model (for conversation sessions)
model ChatSession {
  id            String         @id @default(uuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  startedAt     DateTime       @default(now())
  lastActivity  DateTime       @updatedAt
  metadata      Json?
  conversations Conversation[]

  @@index([userId])
  @@map("chat_sessions")
}

// User permissions for specific agents
model UserAgentPermission {
  id        String   @id @default(uuid())
  userId    String
  agentId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  grantedAt DateTime @default(now())
  grantedBy String?  // User ID of admin who granted access

  @@unique([userId, agentId])
  @@index([userId])
  @@index([agentId])
  @@map("user_agent_permissions")
}
