generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                                  String                   @id @default(cuid())
  email                                               String                   @unique
  emailVerified                                       DateTime?
  name                                                String?
  role                                                UserRole                 @default(USER)
  isActive                                            Boolean                  @default(true)
  createdAt                                           DateTime                 @default(now())
  updatedAt                                           DateTime                 @updatedAt
  subscriptionTier                                    SubscriptionTier         @default(FREE)
  aiProfileLastUpdate                                 DateTime?
  avatar                                              String?
  bio                                                 String?
  customLimits                                        Json?
  dateOfBirth                                         DateTime?
  displayName                                         String?
  language                                            String                   @default("es")
  lastInteraction                                     DateTime?
  lastResetAt                                         DateTime                 @default(now())
  monthlyMessages                                     Int                      @default(0)
  monthlyTokens                                       BigInt                   @default(0)
  permissions                                         Json?
  personalityProfile                                  Json?
  subscriptionEnd                                     DateTime?
  subscriptionId                                      String?
  subscriptionStart                                   DateTime?
  timezone                                            String                   @default("America/Mexico_City")
  totalMessages                                       Int                      @default(0)
  totalTokensUsed                                     BigInt                   @default(0)
  accounts                                            Account[]
  agents                                              agents[]
  audit_logs                                          audit_logs[]
  sessions                                            Session[]
  chatSessions                                        ChatSession[]
  financial_profiles                                  financial_profiles?
  health_profiles                                     health_profiles?
  invitations_invitations_emailTousers                Invitation[]             @relation("invitations_emailTousers")
  invitations_invitations_invitedByTousers            Invitation[]             @relation("invitations_invitedByTousers")
  monthly_usage                                       monthly_usage[]
  support_tickets_support_tickets_assignedToIdTousers support_tickets[]        @relation("support_tickets_assignedToIdTousers")
  support_tickets_support_tickets_userIdTousers       support_tickets[]        @relation("support_tickets_userIdTousers")
  usage_alerts                                        usage_alerts[]
  usage_logs                                          usage_logs[]
  user_agent_permissions                              user_agent_permissions[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Artifact {
  id              String     @id @default(cuid())
  agentId         String
  userId          String
  conversationId  String?
  name            String
  type            String
  content         String
  version         Int        @default(1)
  parentId        String?
  metadata        Json?
  tags            Json?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  agents          agents     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  artifacts       Artifact?  @relation("artifactsToartifacts", fields: [parentId], references: [id])
  other_artifacts Artifact[] @relation("artifactsToartifacts")

  @@index([agentId])
  @@index([parentId])
  @@index([userId])
  @@map("artifacts")
}

model ChatSession {
  id            String          @id @default(cuid())
  userId        String
  startedAt     DateTime        @default(now())
  lastActivity  DateTime
  metadata      Json?
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations conversations[]

  @@index([userId])
  @@map("chat_sessions")
}

model Invitation {
  id                                 String           @id @default(cuid())
  email                              String
  token                              String           @unique
  role                               UserRole
  status                             InvitationStatus @default(PENDING)
  invitedBy                          String
  expiresAt                          DateTime
  acceptedAt                         DateTime?
  createdAt                          DateTime         @default(now())
  users_invitations_emailTousers     User             @relation("invitations_emailTousers", fields: [email], references: [email])
  users_invitations_invitedByTousers User             @relation("invitations_invitedByTousers", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([invitedBy])
  @@map("invitations")
}

model agents {
  id                     String                   @id
  createdBy              String
  name                   String
  description            String?
  model                  String
  config                 Json?
  endpointUrl            String
  isPublic               Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  averageRating          Decimal?                 @db.Decimal(3, 2)
  capabilities           Json?
  category               String
  documentationUrl       String?
  isActive               Boolean                  @default(true)
  slug                   String                   @unique
  systemPrompt           String?
  totalMessages          Int                      @default(0)
  totalUses              Int                      @default(0)
  tutorialUrl            String?
  updatedAt              DateTime
  users                  User                     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  artifacts              Artifact[]
  conversations          conversations[]
  usage_logs             usage_logs[]
  user_agent_permissions user_agent_permissions[]

  @@index([category])
  @@index([createdBy])
  @@index([slug])
}

model allergies {
  id              String          @id
  healthProfileId String
  allergen        String
  type            String
  severity        String
  reaction        String?
  diagnosedDate   DateTime?
  notes           String?
  createdAt       DateTime        @default(now())
  health_profiles health_profiles @relation(fields: [healthProfileId], references: [id], onDelete: Cascade)

  @@index([healthProfileId])
}

model audit_logs {
  id        String   @id
  adminId   String
  action    String
  targetId  String?
  details   Json?
  ipAddress String?
  timestamp DateTime @default(now())
  users     User     @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([timestamp])
}

model budgets {
  id                 String             @id
  financialProfileId String
  name               String
  category           String
  amount             Decimal            @db.Decimal(15, 2)
  period             String             @default("monthly")
  startDate          DateTime
  endDate            DateTime?
  alertThreshold     Int                @default(80)
  alertSent          Boolean            @default(false)
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  financial_profiles financial_profiles @relation(fields: [financialProfileId], references: [id], onDelete: Cascade)

  @@index([financialProfileId])
}

model conversations {
  id            String      @id
  chatSessionId String
  agentId       String
  title         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  messageCount  Int         @default(0)
  summary       String?
  tokenCount    Int         @default(0)
  agents        agents      @relation(fields: [agentId], references: [id], onDelete: Cascade)
  chat_sessions ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  messages      messages[]

  @@index([agentId])
  @@index([chatSessionId])
}

model debt_payments {
  id            String   @id
  debtId        String
  date          DateTime
  amount        Decimal  @db.Decimal(15, 2)
  principalPaid Decimal  @db.Decimal(15, 2)
  interestPaid  Decimal  @db.Decimal(15, 2)
  notes         String?
  createdAt     DateTime @default(now())
  debts         debts    @relation(fields: [debtId], references: [id], onDelete: Cascade)

  @@index([debtId, date])
}

model debts {
  id                 String             @id
  financialProfileId String
  name               String
  type               String
  principal          Decimal            @db.Decimal(15, 2)
  balance            Decimal            @db.Decimal(15, 2)
  interestRate       Decimal            @db.Decimal(5, 2)
  monthlyPayment     Decimal            @db.Decimal(15, 2)
  minimumPayment     Decimal?           @db.Decimal(15, 2)
  startDate          DateTime
  maturityDate       DateTime?
  paymentDueDay      Int
  creditor           String
  accountNumber      String?
  status             String             @default("active")
  payoffStrategy     String?
  priority           Int                @default(1)
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  debt_payments      debt_payments[]
  financial_profiles financial_profiles @relation(fields: [financialProfileId], references: [id], onDelete: Cascade)

  @@index([financialProfileId])
}

model file_access_logs {
  id            String        @id
  fileId        String
  userId        String
  action        FileAction
  ipAddress     String?
  userAgent     String?
  metadata      Json?
  timestamp     DateTime      @default(now())
  storage_files storage_files @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([fileId])
  @@index([timestamp])
  @@index([userId])
}

model file_shares {
  id            String        @id
  fileId        String
  sharedBy      String
  shareType     ShareType     @default(LINK)
  shareToken    String        @unique
  password      String?
  maxDownloads  Int?
  downloadCount Int           @default(0)
  allowDownload Boolean       @default(true)
  allowView     Boolean       @default(true)
  expiresAt     DateTime?
  createdAt     DateTime      @default(now())
  lastAccessed  DateTime?
  revokedAt     DateTime?
  storage_files storage_files @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([fileId])
  @@index([shareToken])
}

model financial_accounts {
  id                 String             @id
  financialProfileId String
  name               String
  type               String
  institution        String?
  balance            Decimal            @db.Decimal(15, 2)
  currency           String             @default("MXN")
  lastSyncDate       DateTime?
  isActive           Boolean            @default(true)
  creditLimit        Decimal?           @db.Decimal(15, 2)
  availableCredit    Decimal?           @db.Decimal(15, 2)
  closingDate        Int?
  paymentDueDate     Int?
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  financial_profiles financial_profiles @relation(fields: [financialProfileId], references: [id], onDelete: Cascade)
  transactions       transactions[]

  @@index([financialProfileId])
}

model financial_profiles {
  id                 String               @id
  userId             String               @unique
  currency           String               @default("MXN")
  fiscalYear         String               @default("calendar")
  financialGoals     Json?
  aiAnalysis         Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  budgets            budgets[]
  debts              debts[]
  financial_accounts financial_accounts[]
  users              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  investments        investments[]
  recurring_payments recurring_payments[]
  transactions       transactions[]
}

model health_measurements {
  id              String          @id
  healthProfileId String
  type            String
  value           Json
  measuredAt      DateTime        @default(now())
  notes           String?
  health_profiles health_profiles @relation(fields: [healthProfileId], references: [id], onDelete: Cascade)

  @@index([healthProfileId, type, measuredAt])
}

model health_profiles {
  id                   String                 @id
  userId               String                 @unique
  bloodType            String?
  height               Decimal?
  weight               Decimal?
  sex                  String?
  emergencyContacts    Json?
  insuranceInfo        Json?
  encryptedData        String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  allergies            allergies[]
  health_measurements  health_measurements[]
  users                User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  medical_appointments medical_appointments[]
  medical_conditions   medical_conditions[]
  medications          medications[]
}

model investments {
  id                 String             @id
  financialProfileId String
  name               String
  type               String
  symbol             String?
  quantity           Decimal?           @db.Decimal(20, 8)
  purchasePrice      Decimal            @db.Decimal(15, 2)
  currentPrice       Decimal?           @db.Decimal(15, 2)
  currentValue       Decimal?           @db.Decimal(15, 2)
  purchaseDate       DateTime
  platform           String?
  returns            Decimal?           @db.Decimal(15, 2)
  returnsPercentage  Decimal?           @db.Decimal(5, 2)
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  financial_profiles financial_profiles @relation(fields: [financialProfileId], references: [id], onDelete: Cascade)

  @@index([financialProfileId])
}

model medical_appointments {
  id              String          @id
  healthProfileId String
  type            String
  specialty       String?
  doctorName      String?
  facility        String?
  scheduledDate   DateTime
  duration        Int?
  status          String          @default("programada")
  reason          String?
  notes           String?
  results         String?
  reminderSent    Boolean         @default(false)
  reminderTime    DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  health_profiles health_profiles @relation(fields: [healthProfileId], references: [id], onDelete: Cascade)

  @@index([healthProfileId, scheduledDate])
}

model medical_conditions {
  id              String          @id
  healthProfileId String
  name            String
  type            String
  severity        String
  diagnosedDate   DateTime?
  diagnosedBy     String?
  status          String          @default("activa")
  notes           String?
  treatment       Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  health_profiles health_profiles @relation(fields: [healthProfileId], references: [id], onDelete: Cascade)

  @@index([healthProfileId])
}

model medication_logs {
  id            String      @id
  medicationId  String
  scheduledTime DateTime
  takenTime     DateTime?
  status        String
  notes         String?
  createdAt     DateTime    @default(now())
  medications   medications @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@index([medicationId, scheduledTime])
}

model medications {
  id              String            @id
  healthProfileId String
  name            String
  genericName     String?
  dosage          String
  frequency       String
  route           String
  prescribedBy    String?
  prescribedDate  DateTime?
  startDate       DateTime
  endDate         DateTime?
  purpose         String?
  sideEffects     String?
  interactions    Json?
  reminderEnabled Boolean           @default(false)
  reminderTimes   Json?
  isActive        Boolean           @default(true)
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  medication_logs medication_logs[]
  health_profiles health_profiles   @relation(fields: [healthProfileId], references: [id], onDelete: Cascade)

  @@index([healthProfileId])
  @@index([isActive])
}

model messages {
  id             String        @id @default(cuid())
  conversationId String
  role           String
  content        String
  metadata       Json?
  timestamp      DateTime      @default(now())
  tokensInput    Int?
  tokensOutput   Int?
  conversations  conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model monthly_usage {
  id            String   @id
  userId        String
  year          Int
  month         Int
  totalMessages Int
  totalTokens   BigInt
  totalCost     Decimal  @db.Decimal(10, 2)
  agentUsage    Json
  limitMessages Int?
  limitTokens   BigInt?
  exceededLimit Boolean  @default(false)
  warningsSent  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  users         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, year, month])
  @@index([userId])
}

model recurring_payments {
  id                 String             @id
  financialProfileId String
  name               String
  amount             Decimal            @db.Decimal(15, 2)
  frequency          String
  category           String
  nextDueDate        DateTime
  dayOfMonth         Int?
  dayOfWeek          Int?
  autoDebit          Boolean            @default(false)
  accountId          String?
  startDate          DateTime
  endDate            DateTime?
  isActive           Boolean            @default(true)
  reminderEnabled    Boolean            @default(true)
  reminderDaysBefore Int                @default(3)
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  financial_profiles financial_profiles @relation(fields: [financialProfileId], references: [id], onDelete: Cascade)

  @@index([financialProfileId, nextDueDate])
}

model storage_files {
  id               String             @id
  filename         String
  originalName     String
  storagePath      String
  storageProvider  StorageProvider    @default(VERCEL_BLOB)
  mimeType         String
  size             BigInt
  checksum         String
  userId           String
  folderId         String?
  accessLevel      FileAccessLevel    @default(PRIVATE)
  usageContext     FileUsageContext   @default(OTHER)
  encrypted        Boolean            @default(false)
  encryptionKeyId  String?
  isProcessed      Boolean            @default(false)
  processingStatus String?
  thumbnailPath    String?
  metadata         Json?
  virusScanStatus  String?
  virusScanDate    DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  deletedAt        DateTime?
  expiresAt        DateTime?
  file_access_logs file_access_logs[]
  file_shares      file_shares[]
  storage_folders  storage_folders?   @relation(fields: [folderId], references: [id])

  @@index([createdAt])
  @@index([expiresAt])
  @@index([folderId])
  @@index([storageProvider])
  @@index([usageContext])
  @@index([userId])
}

model storage_folders {
  id                    String            @id
  userId                String
  name                  String
  parentId              String?
  path                  String
  description           String?
  color                 String?
  icon                  String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime
  storage_files         storage_files[]
  storage_folders       storage_folders?  @relation("storage_foldersTostorage_folders", fields: [parentId], references: [id], onDelete: Cascade)
  other_storage_folders storage_folders[] @relation("storage_foldersTostorage_folders")

  @@unique([userId, path])
  @@index([parentId])
  @@index([userId])
}

model storage_quotas {
  id               String   @id
  userId           String   @unique
  maxStorage       BigInt
  maxFileSize      BigInt
  maxFiles         Int
  usedStorage      BigInt   @default(0)
  fileCount        Int      @default(0)
  usageBreakdown   Json?
  subscriptionTier String   @default("FREE")
  lastCalculated   DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime

  @@index([userId])
}

model support_messages {
  id              String          @id
  ticketId        String
  content         String
  isStaff         Boolean         @default(false)
  isAI            Boolean         @default(false)
  authorId        String?
  attachments     Json?
  createdAt       DateTime        @default(now())
  support_tickets support_tickets @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([ticketId])
}

model support_tickets {
  id                                        String             @id
  ticketNumber                              String             @unique
  title                                     String
  description                               String
  category                                  TicketCategory
  priority                                  TicketPriority     @default(MEDIUM)
  status                                    TicketStatus       @default(OPEN)
  userId                                    String
  assignedToId                              String?
  aiSuggestion                              String?
  aiResolved                                Boolean            @default(false)
  metadata                                  Json?
  resolvedAt                                DateTime?
  closedAt                                  DateTime?
  createdAt                                 DateTime           @default(now())
  updatedAt                                 DateTime
  support_messages                          support_messages[]
  users_support_tickets_assignedToIdTousers User?              @relation("support_tickets_assignedToIdTousers", fields: [assignedToId], references: [id])
  users_support_tickets_userIdTousers       User               @relation("support_tickets_userIdTousers", fields: [userId], references: [id], onDelete: Cascade)

  @@index([assignedToId])
  @@index([status])
  @@index([ticketNumber])
  @@index([userId])
}

model transactions {
  id                 String              @id
  financialProfileId String
  accountId          String?
  date               DateTime
  description        String
  amount             Decimal             @db.Decimal(15, 2)
  type               String
  category           String
  subcategory        String?
  tags               Json?
  fromAccountId      String?
  toAccountId        String?
  isRecurring        Boolean             @default(false)
  recurringPaymentId String?
  notes              String?
  receipt            String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  financial_accounts financial_accounts? @relation(fields: [accountId], references: [id])
  financial_profiles financial_profiles  @relation(fields: [financialProfileId], references: [id], onDelete: Cascade)

  @@index([category, date])
  @@index([financialProfileId, date])
}

model usage_alerts {
  id         String    @id
  userId     String
  type       AlertType
  threshold  Int
  triggered  Boolean   @default(false)
  resolvedAt DateTime?
  createdAt  DateTime  @default(now())
  users      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model usage_logs {
  id             String   @id
  userId         String
  agentId        String
  conversationId String?
  messageId      String?
  tokensInput    Int
  tokensOutput   Int
  totalTokens    Int
  model          String
  costInput      Decimal  @db.Decimal(10, 6)
  costOutput     Decimal  @db.Decimal(10, 6)
  totalCost      Decimal  @db.Decimal(10, 6)
  duration       Int?
  success        Boolean  @default(true)
  errorMessage   String?
  timestamp      DateTime @default(now())
  agents         agents   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  users          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([agentId, timestamp])
  @@index([userId, timestamp])
}

model user_agent_permissions {
  id        String   @id
  userId    String
  agentId   String
  grantedAt DateTime @default(now())
  grantedBy String?
  agents    agents   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, agentId])
  @@index([agentId])
  @@index([userId])
}

enum UserRole {
  ADMIN
  USER
  SUPER_ADMIN
  MANAGER
  DEVELOPER
  GUEST
  INVITED_AGENT
  INVITED_STORAGE
  SUBSCRIBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum AlertType {
  APPROACHING_LIMIT
  LIMIT_WARNING
  LIMIT_EXCEEDED
  UNUSUAL_ACTIVITY
}

enum FileAccessLevel {
  PRIVATE
  INTERNAL
  PUBLIC
  SHARED
}

enum FileAction {
  UPLOAD
  DOWNLOAD
  VIEW
  DELETE
  SHARE
  UPDATE
}

enum FileUsageContext {
  THEME
  AVATAR
  TICKET
  ARTIFACT
  HEALTH
  FINANCE
  BACKUP
  TEMP
  OTHER
}

enum ShareType {
  LINK
  EMAIL
  USER
}

enum StorageProvider {
  VERCEL_BLOB
  LOCAL
  AWS_S3
  CLOUDFLARE_R2
}

enum SubscriptionTier {
  FREE
  BASIC
  PRO
  ENTERPRISE
  CUSTOM
  UNLIMITED
}

enum TicketCategory {
  BUG
  FEATURE
  QUESTION
  ACCOUNT
  BILLING
  PERFORMANCE
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_USER
  RESOLVED
  CLOSED
  CANCELLED
}

// ═══════════════════════════════════════════════════════════
// PHASE 7 MODELS - Added for MVP features
// ═══════════════════════════════════════════════════════════

// Tarea 1: OpenAI gpt-realtime Integration - Voice Chat Sessions
model VoiceSession {
  id            String   @id @default(cuid())
  userId        String

  status        String   @default("ACTIVE") // ACTIVE, COMPLETED, FAILED
  messagesCount Int      @default(0)

  tokensInput   Int      @default(0)
  tokensOutput  Int      @default(0)
  costTotal     Float    @default(0)

  durationMs    Int?     // Duration in milliseconds

  startedAt     DateTime @default(now())
  endedAt       DateTime?

  @@index([userId])
  @@map("voice_sessions")
}

// Tarea 2: DALL-E 3 Integration - Generated Images
model GeneratedImage {
  id         String   @id @default(cuid())
  userId     String

  prompt     String   @db.Text
  imageUrl   String   @db.Text

  size       String   @default("1024x1024") // 1024x1024, 1792x1024, 1024x1792
  quality    String   @default("standard")   // standard, hd
  style      String   @default("vivid")      // vivid, natural

  model      String   @default("dall-e-3")
  cost       Float    @default(0)

  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@map("generated_images")
}

// Tarea 3: Task Management - Kanban Board
model Task {
  id          String    @id @default(cuid())
  userId      String

  title       String
  description String?   @db.Text

  status      String    @default("TODO") // TODO, IN_PROGRESS, DONE
  priority    String    @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT

  tags        String[]  @default([])

  dueDate     DateTime?
  position    Int       @default(0) // For ordering within columns

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([status])
  @@map("tasks")
}
